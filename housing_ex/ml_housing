#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Housing data ML project

@author: abishekk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, StratifiedShuffleSplit

from pandas.plotting import scatter_matrix

from utility_functions import fetch_data_from_url, load_csv_data, \
  create_test_train_splits

#%% Import housing data
# Data source 
DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ageron/handson-ml/master/" 
HOUSING_PATH = "datasets/housing"
HOUSING_URL = DOWNLOAD_ROOT + HOUSING_PATH + "/housing.tgz"
DATA_FILE  = 'housing.csv'

# download data
fetch_data_from_url(HOUSING_URL, './datasets')

# load csv data using Pandas
housing_data = load_csv_data('./datasets', DATA_FILE)

#%% Inspect data

# housing_data.head(): displays first few lines
# display info about the database
print(housing_data.info())

# summary of non-numerical/categorical attributes
print(housing_data["ocean_proximity"].value_counts())

# summary of numerical attributes
print(housing_data.describe())

# histogram plots of the data 
#housing_data.hist(bins=50, figsize=(20,15))
#plt.show()

#%% Create testing and training data

# Method 1:
#housing_training, housing_testing = create_test_train_splits(housing_data,0.25)

# Method 2:
#training_set, testing_set = train_test_split(housing_data, test_size = 0.25, \
#                                             random_state = 42)

# Method 3:
# stratified split: create test samples that are representative of the overall
# distribution
housing_data["income_cat"] = np.ceil(housing_data["median_income"]/1.5)

housing_data["income_cat"].where(housing_data["income_cat"] < 5.0, \
            5.0, inplace = True)

strata_split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)

for train_index, test_index in strata_split.split(housing_data, housing_data["income_cat"]):
    strat_training_set = housing_data.loc[train_index]
    strat_test_set = housing_data.loc[test_index]

for set in (strat_training_set, strat_test_set): 
    set.drop(["income_cat"], axis=1, inplace=True)
    
#%% Visualize data

housing_plot_data = strat_training_set.copy()

housing_plot_data.plot(kind="scatter",x="latitude",y="longitude", alpha=0.4,
                       s=housing_plot_data["population"]/100, label="population",
                       c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True)

plt.legend()

#%% Correlation matrix and inspecting data for identifying correlations

housing_corr_mat = housing_data.corr()

print(housing_corr_mat["median_house_value"].sort_values(ascending=False))

# Use pandas to see correlations
attributes = ["median_house_value","median_income","total_rooms"]

scatter_matrix(housing_data[attributes],figsize=(12,8))

# scatter plot
housing_data.plot(kind="scatter",x="median_income",y="median_house_value",alpha=0.2)

#%% Create new attributes

housing_data["rooms_per_household"] = \
housing_data["total_rooms"]/housing_data["households"]

housing_data["bedrooms_per_room"] = \
housing_data["total_bedrooms"]/housing_data["total_rooms"]

housing_data["population_per_household"] = \
housing_data["population"]/housing_data["households"]

housing_corr_mat = housing_data.corr()

print(housing_corr_mat["median_house_value"].sort_values(ascending=False))

#%% Cleaning data
housing_train_inputs = strat_training_set.drop("median_house_value",axis=1)
housing_train_label = strat_training_set["median_house_value"].copy()

# Missing data

# 1 - drop data 
#housing_train_inputs.drop("total_bedrooms", axis=1)

# 2 - drop rows with missing data
#housing_train_inputs.dropna(subset=["total_bedrooms"])

# 3 - fill with some value like mean, median etc
#median_bedrooms = housing_train_inputs["total_bedrooms"].median()
#housing_train_inputs["total_bedrooms"].fillna(median_bedrooms)

# 4 - scikit learn imputer, label encoder
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy="median")

numerical_cols = housing_train_inputs.drop("ocean_proximity",axis=1)
imputer.fit(numerical_cols)
print(imputer.statistics_)
print(numerical_cols.median().values)

X = imputer.transform(numerical_cols)

housing_tr_data= pd.DataFrame(X,columns=numerical_cols.columns)

# from sklearn.preprocessing import LabelEncoder
#
# encoder = LabelEncoder()
# categorical_cols = housing_train_inputs["ocean_proximity"]
# cat_encoded = encoder.fit_transform(categorical_cols)
# print(encoder.classes_)

from sklearn.preprocessing import LabelBinarizer

encoder = LabelBinarizer()

categorical_cols = housing_train_inputs["ocean_proximity"]
housing_cat_onehot = encoder.fit_transform(categorical_cols)
print(housing_cat_onehot)

#%% Attributes adder
from sklearn.base import BaseEstimator, TransformerMixin

# get the right column indices: safer than hard-coding indices 3, 4, 5, 6
rooms_ix, bedrooms_ix, population_ix, household_ix = [
    list(housing_data.columns).index(col)
    for col in ("total_rooms", "total_bedrooms", "population", "households")]

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    
    def __init__(self, add_bedrooms_per_room = True): # no *args or **kwargs
        self.add_bedrooms_per_room = add_bedrooms_per_room
    
    def fit(self, X, y=None):
        return self  # nothing else to do
    
    def transform(self, X, y=None):
        rooms_per_household = X[:, rooms_ix] / X[:, household_ix]
        population_per_household = X[:, population_ix] / X[:, household_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household,
                         bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

#%% Feature Scaling

# Using pipelines
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder

num_attr_pipeline = Pipeline([('imputer', SimpleImputer(strategy="median")),
                              ('attr_adder', CombinedAttributesAdder()),
                              ('std_scaler', StandardScaler())])

housing_num_transform = num_attr_pipeline.fit_transform(numerical_cols)

# Full pipelines using FeatureUnion
from sklearn.compose import ColumnTransformer

num_attr = list(numerical_cols)
cat_attr = ["ocean_proximity"]

full_pipeline = ColumnTransformer([
        ("num", num_attr_pipeline, num_attr),
        ("cat", OneHotEncoder(), cat_attr) ])

housing_training_prepared = full_pipeline.fit_transform(strat_training_set)

#%% Select and train a model
from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression()
lin_reg.fit(housing_training_prepared, housing_train_label)

some_data = strat_training_set.iloc[:5]
some_labels = housing_train_label.iloc[:5]
some_data_prepared = full_pipeline.transform(some_data)

print("Predictions:", lin_reg.predict(some_data_prepared))

from sklearn.metrics import mean_squared_error, mean_absolute_error

housing_predictions = lin_reg.predict(housing_training_prepared)
lin_mse = mean_squared_error(housing_train_label, housing_predictions)
lin_rmse = np.sqrt(lin_mse)
print(" Lin reg RMSE:", lin_rmse)

lin_mae = mean_absolute_error(housing_train_label, housing_predictions)
print("lin reg MAE:", lin_mae)

# Decision tree
from sklearn.tree import DecisionTreeRegressor

tree_reg = DecisionTreeRegressor(random_state=42)
tree_reg.fit(housing_training_prepared, housing_train_label)

housing_predictions = tree_reg.predict(housing_training_prepared)
tree_mse = mean_squared_error(housing_train_label, housing_predictions)
tree_rmse = np.sqrt(tree_mse)
print("Tree RMSE:", tree_rmse)

# Cross-validation
from sklearn.model_selection import cross_val_score

scores = cross_val_score(tree_reg, housing_training_prepared, housing_train_label,
                         scoring="neg_mean_squared_error", cv=10)

tree_rmse_scores = np.sqrt(-scores)

def display_scores(scores):
    print("Scores:", scores)
    print("Mean:", scores.mean())
    print("Standard deviation:", scores.std())

print("Decision tree")
display_scores(tree_rmse_scores)

lin_scores = cross_val_score(lin_reg, housing_training_prepared, housing_train_label,
                         scoring="neg_mean_squared_error", cv=10)
lin_rmse_scores = np.sqrt(-lin_scores)
print("Linear Regression")
display_scores(lin_rmse_scores)

# Random forest regression
from sklearn.ensemble import RandomForestRegressor

forest_reg = RandomForestRegressor(n_estimators=20, random_state=42)
forest_reg.fit(housing_training_prepared, housing_train_label)

housing_predictions = forest_reg.predict(housing_training_prepared)
forest_mse = mean_squared_error(housing_train_label, housing_predictions)
forest_rmse = np.sqrt(forest_mse)
print("Forest RMSE:", forest_rmse)

forest_scores = cross_val_score(forest_reg, housing_training_prepared, housing_train_label,
                         scoring="neg_mean_squared_error", cv=10)
forest_rmse_scores = np.sqrt(-forest_scores)
print("Random Forest Regression")
display_scores(forest_rmse_scores)

# Support Vector Reg
from sklearn.svm import SVR

svm_reg = SVR(kernel="linear")
svm_reg.fit(housing_training_prepared, housing_train_label)

housing_predictions = svm_reg.predict(housing_training_prepared)
svm_mse = mean_squared_error(housing_train_label, housing_predictions)
svm_rmse = np.sqrt(svm_mse)
print("SVR RMSE:", svm_rmse)

#%% Hyperparameter fitting using GridSearchCV
from sklearn.model_selection import GridSearchCV

param_grid = [
    # try 12 (3×4) combinations of hyperparameters
    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},
    # then try 6 (2×3) combinations with bootstrap set as False
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},
  ]

forest_reg = RandomForestRegressor(random_state=42)
# train across 5 folds, that's a total of (12+6)*5=90 rounds of training 
grid_search = GridSearchCV(forest_reg, param_grid, cv=5,
                           scoring='neg_mean_squared_error', return_train_score=True)
grid_search.fit(housing_training_prepared, housing_train_label)

#%% explore search results
print(grid_search.best_params_)
print(grid_search.best_estimator_)

cvres = grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)

feature_imp = grid_search.best_estimator_.feature_importances_
print(feature_imp)

extra_attr = ["rooms_per_hhold", "pop_per_hhold", "bedrooms_per_room"]

cat_encoder = full_pipeline.named_transformers_["cat"]
cat_one_hot_attr = list(cat_encoder.categories_[0])

attributes = num_attr + extra_attr + cat_one_hot_attr
print(sorted(zip(feature_imp, attributes), reverse=True))
    
#%% Run on test data set
housing_test_inputs = strat_test_set.drop("median_house_value",axis=1)
housing_test_label = strat_test_set["median_house_value"].copy()

housing_testing_prepared = full_pipeline.fit_transform(housing_test_inputs)

final_model = grid_search.best_estimator_

test_predict = final_model.predict(housing_testing_prepared)

final_rmse = np.sqrt(mean_squared_error(test_predict, housing_test_label))
print("Final RMSE: ", final_rmse)

#%% Hyperparameter search using RandomSearchCV
    
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint

param_distrib = {
        'n_estimators': randint(low=1, high=200),
        'max_features': randint(low=1, high=8),
    }

forest_reg = RandomForestRegressor(random_state=42)

rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distrib,
             n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)

rnd_search.fit(housing_training_prepared, housing_train_label)

cvres = rnd_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)